{"version":3,"sources":["webpack:///./index.js"],"names":["refs","days","document","querySelector","hours","mins","secs","CountdownTimer","constructor","selector","targetDate","onTick","this","intervalId","start","setInterval","currentTime","Date","now","deltaTime","time","getTimeComponents","console","log","pad","Math","floor","value","String","padStart","textContent"],"mappings":"kHAAA,yDAEA,MAAMA,EAAO,CACTC,KAAMC,SAASC,cAAc,2BAC7BC,MAAOF,SAASC,cAAc,4BAC9BE,KAAMH,SAASC,cAAc,2BAC7BG,KAAMJ,SAASC,cAAc,4BAIlB,MAAMI,EAEjBC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,OAAwBC,IAClCC,KAAKH,SAAWA,EAChBG,KAAKC,WAAa,KAClBD,KAAKF,WAAaA,EAClBE,KAAKD,OAASA,EAEhBG,QACIF,KAAKC,WAAaE,YAAY,KAC1B,MAAMC,EAAcC,KAAKC,MACnBC,EAAYP,KAAKF,WAAaM,EAC9BI,EAAOR,KAAKS,kBAAkBF,GACpCG,QAAQC,IAAIH,GACZR,KAAKD,OAAOS,IACb,KAEPC,kBAAkBD,GAKlB,MAAO,CAAEnB,KAJIW,KAAKY,IAAIC,KAAKC,MAAMN,EAAO,QAIzBhB,MAHDQ,KAAKY,IAAIC,KAAKC,MAAON,EAAO,MAAR,OAGZf,KAFTO,KAAKY,IAAIC,KAAKC,MAAON,EAAO,KAAR,MAELd,KADfM,KAAKY,IAAIC,KAAKC,MAAON,EAAO,IAAe,OAGxDI,IAAIG,GACJ,OAAOC,OAAOD,GAAOE,SAAS,EAAG,MAGvB,IAAItB,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIO,KAAK,gBACrBN,OAEF,UAAyB,KAAEV,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC5CN,EAAKC,KAAK6B,YAAe,GAAE7B,EAC3BD,EAAKI,MAAM0B,YAAe,GAAE1B,EAC5BJ,EAAKK,KAAKyB,YAAe,GAAEzB,EAC3BL,EAAKM,KAAKwB,YAAe,GAAExB,KAEvBQ,U","file":"main.6911aac90ea2989eeb72.js","sourcesContent":["import './styles.css';\n\nconst refs = {\n    days: document.querySelector('span[data-value=\"days\"]'),\n    hours: document.querySelector('span[data-value=\"hours\"]'),\n    mins: document.querySelector('span[data-value=\"mins\"]'),\n    secs: document.querySelector('span[data-value=\"secs\"]'),\n}\n    \n\nexport default class CountdownTimer { \n\n    constructor({ selector, targetDate, onTick }) { \n      this.selector = selector;\n      this.intervalId = null;\n      this.targetDate = targetDate;\n      this.onTick = onTick;\n    }\n    start() {\n        this.intervalId = setInterval(() => {\n            const currentTime = Date.now(); \n            const deltaTime = this.targetDate - currentTime;\n            const time = this.getTimeComponents(deltaTime);\n            console.log(time);\n            this.onTick(time);\n        }, 1000);\n    }\n    getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { days, hours, mins, secs };\n  }\n    pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\nconst timer = new CountdownTimer({\n  selector: '#timer-1', \n  targetDate: new Date('Dec 31, 2020'),\n  onTick: updateClockface,\n});\nfunction updateClockface({ days, hours, mins, secs }) {\n  refs.days.textContent = `${days}`;\n  refs.hours.textContent = `${hours}`;\n  refs.mins.textContent = `${mins}`;\n  refs.secs.textContent = `${secs}`;\n}\ntimer.start();"],"sourceRoot":""}